version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      circle_workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying Environment: << parameters.circle_workflow_id >> "
            aws s3 rm s3://udapeople-<< parameters.circle_workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.circle_workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.circle_workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      circle_workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.circle_workflow_id >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

  # install_awscli:
  #   description:  Install AWS CLI v2
  #   steps:
  #     - run:
  #         name: Install AWS CLI v2
  #         command:  |
  #           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #           unzip awscliv2.zip
  #           sudo ./aws/install

  # install_ansible:
  #   description:  Install Ansible
  #   steps:
  #     - run:
  #         name: Install Ansible
  #         command:  |
  #           python3 -m pip install --user ansible
  
  #  install_nodejs:
  #   description: Install Nodejs 13.8.0
  #   steps:
  #     - run:
  #         name: Install Nodejs 13.8.0
  #         command:  |
  #           curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
  #           sudo apt install -y nodejs
  #           sudo npm install --global n
  #           sudo n 13.8.0          

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:  [frontend-build]
      - run:
          name: Test frontend
          command:  |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:  [backend-build]
      - run:
          name: Test backend
          command:  |
            cd backend
            npm install
            npm run build

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend
          command:  |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event:  fail
          template: basic_fail_1
      - save_cache:
          paths:  [frontend/node_modules]
          key:  frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command:  |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event:  fail
          template: basic_fail_1
      # - slack/notify:
      #     event:  pass
      #     template: success_tagged_deployment_1
      - save_cache:
          paths:  [backend/node_modules]
          key:  frontend-build

  deploy-infrastructure:
    docker:
      - image:  amazon/aws-cli
    steps:
      - checkout
      - run:  yum -y install tar gzip git openssh-client aws-cli
      - run:
          name: Ensure back-end infrastructure exists
          command:  |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            backend_ec2_public_ip=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --output text) 
            echo "$backend_ec2_public_ip"  
            echo "$backend_ec2_public_ip" >> ~/env_vars.txt
            cat ~/env_vars.txt
            echo "$backend_ec2_public_ip" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          circle_workflow_id: "${CIRCLE_WORKFLOW_ID:0:5}"

  configure-infrastructure:
    docker:
      - image:  python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["90:c0:37:45:2e:8e:cc:c9:9d:68:62:26:75:0c:30:80"]
      - run:
          name: Install dependencies
          command:  |
            apk add --update --no-cache tar gzip ansible aws-cli
      - attach_workspace:
          at: ~/
      - run:
          name: Run Playbook and Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          circle_workflow_id: "${CIRCLE_WORKFLOW_ID:0:5}"

  run-migrations:
    docker:
      - image:  python:3.10-alpine3.16
    steps:
      - checkout
    - run:
        name: Install dependencies
        command:  |
          apk add --update --no-cache tar gzip nodejs npm ansible awscli curl
    - restore_cache:
        keys: [backend-build]
    - run:
        name: Run migrations
        command:  |
          cd backend
          npm install
          npm run build
          npm run migrations >> migrations,txt
    - run:
        name: Send migration results to kvdb.io
        command:  |
          if grep -q "has been executed successfully." ~/project/backend/migrations.txt
          then
            curl https://kvdb.io/{$KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:5} -d  '1'
          fi
    - save_cache:
        paths:  [backend/node_modules]
        key:  backend-build
    - revert-migrations:
        circle_workflow_id: "${CIRCLE_WORKFLOW_ID:0:5}"


workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure
          #requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
     # - deploy-frontend:
     #     requires: [run-migrations]
      